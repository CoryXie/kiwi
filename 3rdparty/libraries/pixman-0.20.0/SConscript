#
# Copyright (C) 2010-2011 Alex Smith
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

# Note about updating: pixman-cpu.c needs to have an attribute put on
# detect_cpu_features() to disable MMX and SSE code generation.

Import('env', 'config')

# Base sources.
sources = [
	'pixman-access.c',
	'pixman-access-accessors.c',
	'pixman-cpu.c',
	'pixman-gradient-walker.c',
	'pixman-region16.c',
	'pixman-region32.c',
	'pixman-image.c',
	'pixman-implementation.c',
	'pixman-combine32.c',
	'pixman-combine64.c',
	'pixman-general.c',
	'pixman.c',
	'pixman-fast-path.c',
	'pixman-solid-fill.c',
	'pixman-conical-gradient.c',
	'pixman-linear-gradient.c',
	'pixman-radial-gradient.c',
	'pixman-bits-image.c',
	'pixman-utils.c',
	'pixman-edge.c',
	'pixman-edge-accessors.c',
	'pixman-trap.c',
	'pixman-timer.c',
	'pixman-matrix.c',
]

# Build flags.
ccflags = filter(lambda f: f not in ['-Wextra'], env['CCFLAGS']) + [
	'-fno-strict-aliasing',
	'-fvisibility=hidden',
	'-Wno-missing-declarations',
	'-Wno-uninitialized',
	'-Wno-redundant-decls',
]
defines = {
	'PIXMAN_NO_TLS': 1,
	'HAVE_CONFIG_H': 1,
}

# Architecture-specific feature definitions, flags and sources.
if config['SRCARCH'] == 'x86':
	if config['ARCH'] == 'amd64':
		defines['SIZEOF_LONG'] = 8
		defines['USE_SSE2'] = 1
		sources += ['pixman-sse2.c']
		ccflags += ['-msse2']
	else:
		defines['SIZEOF_LONG'] = 4
	defines['USE_MMX'] = 1
	sources += ['pixman-mmx.c']
	ccflags += ['-mmmx']
else:
	raise Exception, "Architecture support not added."

# Build the library.
env.KiwiLibrary('pixman',
	sources = map(lambda x: File('pixman/' + x), sources),
	libraries = ['m'],
	include_path = Dir('include'),
	flags = {
		'CPPPATH': env['CPPPATH'] + ['.'],
		'CPPDEFINES': defines,
		'CCFLAGS': ccflags,
	},
)
