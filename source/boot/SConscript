#
# Copyright (C) 2010 Alex Smith
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED AS IS AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

Import('config', 'envmgr')

# List of our own sources.
sources = map(File, [
	'fs/ext2.c',
	'fs/iso9660.c',

	'lib/printf.c',
	'lib/string.c',
	'lib/support.c',

	'loaders/kiwi.c',

	'partitions/msdos.c',

	'config.c',
	'console.c',
	'disk.c',
	'error.c',
	'fs.c',
	'kargs.c',
	'main.c',
	'memory.c',
	'menu.c',
	'ui.c',
	'video.c',
])

############################
# Build environment set-up #
############################

# Create the boot environment.
env = envmgr.Create('boot', {
	'LIBS': [],
	'CPPPATH': [
		Dir('include'),
		Dir('arch/%s/include' % (config['SRCARCH'])),
		Dir('platform/%s/include' % (config['PLATFORM'])),
	],
	'CCFLAGS': [
		'-nostdlib', '-nostdinc', '-ffreestanding',
		'-fno-stack-protector', '-include',
		'build/%s-%s/config.h' % (config['ARCH'], config['PLATFORM']),
	],
	'CXXFLAGS': [
		'-fno-exceptions', '-fno-rtti',
	],
	'ASFLAGS': [
		'-nostdinc', '-include',
		'build/%s-%s/config.h' % (config['ARCH'], config['PLATFORM']),
	],
	'LINKFLAGS': [
		'-nostdlib',
	],
	'CPPDEFINES': {
		'KERNEL': None,
		'LOADER': None,
	},
})

# Override any optimisation level specified, we want to optimise for size.
env['CCFLAGS'] = filter(lambda f: f[0:2] != '-O', env['CCFLAGS']) + ['-Os']

# Add the GCC include directory for some standard headers.
from subprocess import Popen, PIPE
incdir = Popen([env['CC'], '-print-file-name=include'], stdout=PIPE).communicate()[0].strip()
env['CCFLAGS'] += ['-isystem', incdir]
env['ASFLAGS'] += ['-isystem', incdir]

# Let the distribution environment know where the loader is.
envmgr['dist']['LOADER'] = File('loader')

# Get the list of source files from the architecture/platform.
arch_sources = SConscript(dirs=['arch/' + config['SRCARCH']], exports=['env'])
platform_sources = SConscript(dirs=['platform/' + config['PLATFORM']], exports=['env'])
sources = arch_sources + platform_sources + sources

# Link the bootloader.
env.Program('loader.elf', map(env.Object, sources), LINKFLAGS=env['LINKFLAGS'] + ['-Wl,-T,$LDSCRIPT'])
Depends('loader.elf', env['LDSCRIPT'])

# Generate various information files and the stripped boot loader image.
env.Command('loader.lst', 'loader.elf', Action('$OBJDUMP -d $SOURCE > $TARGET', '$GENCOMSTR'))
env.Command('loader.rde', 'loader.elf', Action('$READELF -a $SOURCE > $TARGET', '$GENCOMSTR'))
env.Command('loader.sym', 'loader.elf', Action('$NM -C $SOURCE | sort > $TARGET', '$GENCOMSTR'))
env.Command('loader', 'loader.elf', Action('$OBJCOPY -O binary --strip-all $SOURCE $TARGET', '$GENCOMSTR'))
Depends('loader', ['loader.lst', 'loader.rde', 'loader.sym'])
