# Kiwi build system
# Copyright (C) 2009 Alex Smith
#
# Kiwi is open source software, released under the terms of the Non-Profit
# Open Software License 3.0. You should have received a copy of the
# licensing information along with the source code distribution. If you
# have not received a copy of the license, please refer to the Kiwi
# project website.
#
# Please note that if you modify this file, the license requires you to
# ADD your name to the list of contributors. This boilerplate is not the
# license itself; please refer to the copy of the license you have received
# for complete terms.

import os
import sys

Import('env', 'config')

# Generate the version information file. Thanks to the use of MD5 file
# checksums, this won't be rebuilt unless the version info changes!
def gen_version_c(target, source, env):
	f = open(str(target[0]), 'w')
	f.write('int kiwi_ver_release = %d;\n' % (env['KIWI_VER_RELEASE']))
	f.write('int kiwi_ver_update = %d;\n' % (env['KIWI_VER_UPDATE']))
	f.write('int kiwi_ver_revision = %d;\n' % (env['KIWI_VER_REVISION']))
	f.write('const char *kiwi_ver_codename = "%s";\n' % (env['KIWI_VER_CODENAME']))
	f.write('const char *kiwi_ver_string = "%s";\n' % (env['KIWI_VER_STRING']))
	f.close()
AlwaysBuild(env.Command('version.c', [], env.Action(gen_version_c, None)))

env['OBJFILES'] += [
	env.Object('console/console.c'),
	env.Object('console/kprintf.c'),

	env.Object('cpu/cpu.c'),
	env.Object('cpu/intr.c'),
	env.Object('cpu/ipi.c'),
	env.Object('cpu/irq.c'),

	env.Object('io/context.c'),
	env.Object('io/ramfs.c'),
	env.Object('io/vfs.c'),

	env.Object('lib/do_printf.c'),
	env.Object('lib/qsort.c'),
	env.Object('lib/sprintf.c'),
	env.Object('lib/string.c'),

	env.Object('mm/kheap.c'),
	env.Object('mm/malloc.c'),
	env.Object('mm/page.c'),
	env.Object('mm/safe.c'),
	env.Object('mm/slab.c'),
	env.Object('mm/tlb.c'),
	env.Object('mm/vm/anon.c'),
	env.Object('mm/vm/page.c'),
	env.Object('mm/vm/vm.c'),
	env.Object('mm/vmem.c'),

	env.Object('proc/handle.c'),
	env.Object('proc/loader.c'),
	env.Object('proc/process.c'),
	env.Object('proc/sched.c'),
	env.Object('proc/syscall.c'),
	env.Object('proc/thread.c'),

	env.Object('sync/mutex.c'),
	env.Object('sync/rwlock.c'),
	env.Object('sync/semaphore.c'),
	env.Object('sync/spinlock.c'),
	env.Object('sync/waitq.c'),

	env.Object('time/timer.c'),

	env.Object('types/avl.c'),
	env.Object('types/bitmap.c'),
	env.Object('types/hash.c'),
	env.Object('types/radix.c'),

	env.Object('bootmod.c'),
	env.Object('elf.c'),
	env.Object('fatal.c'),
	env.Object('init.c'),
	env.Object('kdbg.c'),
	env.Object('module.c'),
	env.Object('symbol.c'),
	env.Object('version.c'),
]
