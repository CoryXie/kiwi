# Kiwi build system
# Copyright (C) 2009 Alex Smith
#
# Kiwi is open source software, released under the terms of the Non-Profit
# Open Software License 3.0. You should have received a copy of the
# licensing information along with the source code distribution. If you
# have not received a copy of the license, please refer to the Kiwi
# project website.
#
# Please note that if you modify this file, the license requires you to
# ADD your name to the list of contributors. This boilerplate is not the
# license itself; please refer to the copy of the license you have received
# for complete terms.

Import('envmgr', 'config')

###############################
# Subdirectory configuration. #
###############################

subdirs = ['fs', 'platform']

##############################
# Module environment set-up. #
##############################

# Dictionary-like class that sets up an include directory link whenever an
# item is added to it.
class IncludeDict:
	def __init__(self, env):
		self.env = env
	def __setitem__(self, key, value):
		self.env['MODINCDIR'].Dir(key).link(value, 1)

env = envmgr.Create('module', envmgr['kernel'])
env['MODULES'] = []
env['MODINCDIR'] = Dir('include')
env['INCDIRS'] = IncludeDict(env)
env['CPPPATH'].append(Dir('include'))

# Do not emit common symbols.
env['CCFLAGS'] += ['-fno-common']

# Not sure if this is the right way to do this (add any modules to the module
# list in the environment), but an emitter seems to work...
def module_emitter(target, source, env):
	env['MODULES'].append(target[0])
	return target, source
env['BUILDERS']['Module'] = Builder(
	action=Action('$LINK -r -o $TARGET $SOURCES', '$LINKCOMSTR'),
	suffix='.km',
	src_suffix='$OBJSUFFIX',
	src_builder='Object',
	emitter=module_emitter)

# Get all of the modules and include directories into the array.
SConscript(dirs=subdirs, exports=['env'])

# Let the distribution environment know where the modules are.
envmgr['dist']['MODULES'] = env['MODULES']
