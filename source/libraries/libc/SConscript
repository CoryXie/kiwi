# Copyright (C) 2010 Alex Smith
#
# Kiwi is open source software, released under the terms of the Non-Profit
# Open Software License 3.0. You should have received a copy of the
# licensing information along with the source code distribution. If you
# have not received a copy of the license, please refer to the Kiwi
# project website.
#
# Please note that if you modify this file, the license requires you to
# ADD your name to the list of contributors. This boilerplate is not the
# license itself; please refer to the copy of the license you have received
# for complete terms.

Import('env', 'config')

sources = map(File, [
	'ctype/isalnum.c',
	'ctype/isalpha.c',
	'ctype/isascii.c',
	'ctype/isblank.c',
	'ctype/iscntrl.c',
	'ctype/isdigit.c',
	'ctype/isgraph.c',
	'ctype/islower.c',
	'ctype/isprint.c',
	'ctype/ispunct.c',
	'ctype/isspace.c',
	'ctype/isupper.c',
	'ctype/isxdigit.c',
	'ctype/toascii.c',
	'ctype/tolower.c',
	'ctype/toupper.c',

	'dirent/alphasort.c',
	'dirent/closedir.c',
	'dirent/opendir.c',
	'dirent/readdir.c',
	'dirent/rewinddir.c',
	'dirent/scandir.c',

	'fcntl/fcntl.c',
	'fcntl/open.c',

	'locale/localeconv.c',
	'locale/setlocale.c',

	'signal/kill.c',
	'signal/signal.c',

	'stdio/buffer.c',
	'stdio/do_printf.c',
	'stdio/do_scanf.c',
	'stdio/fclose.c',
	'stdio/fflush.c',
	'stdio/fgetc.c',
	'stdio/fgets.c',
	'stdio/fopen.c',
	'stdio/fputc.c',
	'stdio/fputs.c',
	'stdio/fread.c',
	'stdio/fseek.c',
	'stdio/fstatus.c',
	'stdio/fwrite.c',
	'stdio/perror.c',
	'stdio/remove.c',
	'stdio/rename.c',
	'stdio/vfprintf.c',
	'stdio/vfscanf.c',
	'stdio/vsnprintf.c',
	'stdio/vsscanf.c',

	'stdlib/abort.c',
	'stdlib/abs.c',
	'stdlib/atoi.c',
	'stdlib/atoll.c',
	'stdlib/atof.c',
	'stdlib/bsearch.c',
	'stdlib/environ.c',
	'stdlib/exit.c',
	'stdlib/malloc.c',
	'stdlib/mkstemp.c',
	'stdlib/qsort.c',
	'stdlib/rand.c',
	'stdlib/strtod.c',
	'stdlib/strtoul.c',

	'string/memchr.c',
	'string/memcmp.c',
	'string/memcpy.c',
	'string/memmove.c',
	'string/memset.c',
	'string/strcasecmp.c',
	'string/strcat.c',
	'string/strchr.c',
	'string/strcmp.c',
	'string/strcpy.c',
	'string/strcspn.c',
	'string/strdup.c',
	'string/strerror.c',
	'string/strlen.c',
	'string/strpbrk.c',
	'string/strsep.c',
	'string/strstr.c',
	'string/strtok.c',

	'sys/chmod.c',
	'sys/mkdir.c',
	'sys/stat.c',
	'sys/umask.c',
	'sys/utime.c',
	'sys/wait.c',

	'time/asctime.c',
	'time/gettimeofday.c',
	'time/gmtime.c',
	'time/localtime.c',
	'time/mktime.c',
	'time/nanosleep.c',
	'time/strftime.c',
	'time/time.c',

	'unistd/access.c',
	'unistd/chdir.c',
	'unistd/chown.c',
	'unistd/close.c',
	'unistd/dup.c',
	'unistd/execlp.c',
	'unistd/execve.c',
	'unistd/execvp.c',
	'unistd/fork.c',
	'unistd/getcwd.c',
	'unistd/getopt.c',
	'unistd/getpid.c',
	'unistd/isatty.c',
	'unistd/lseek.c',
	'unistd/pipe.c',
	'unistd/read.c',
	'unistd/rmdir.c',
	'unistd/sleep.c',
	'unistd/symlink.c',
	'unistd/sync.c',
	'unistd/unlink.c',
	'unistd/write.c',

	'errno.c',
	'error_list.c',
	'fatal.c',
	'init.c',
])

# Generate the error string list.
env.Command(
	'error_list.c',
	['../../include/errno.h'],
	Action('$GENERRLIST $SOURCE __libc_error_list __libc_error_size > $TARGET', '$GENCOMSTR')
)

# Get a list of architecture-specific source files.
arch_sources = SConscript(dirs=['arch/%s' % (config['ARCH'])], exports=['env'])

# Build the library from this.
env.SharedLibrary('c', arch_sources + sources, LINKFLAGS='-nodefaultlibs', LIBS=['kernel'])
