# Kiwi build system
# Copyright (C) 2009 Alex Smith
#
# Kiwi is open source software, released under the terms of the Non-Profit
# Open Software License 3.0. You should have received a copy of the
# licensing information along with the source code distribution. If you
# have not received a copy of the license, please refer to the Kiwi
# project website.
#
# Please note that if you modify this file, the license requires you to
# ADD your name to the list of contributors. This boilerplate is not the
# license itself; please refer to the copy of the license you have received
# for complete terms.

Import('envmgr', 'config')

# Set up the userspace build environment.
env = envmgr.Create('uspace')
env['CPPPATH'] = [Dir('include'), Dir('include/c++')]
env['LIBPATH'] = [Dir('libraries')]
env['ASFLAGS'] += ['-include', 'build/%s-%s/config.h' % (config['ARCH'], config['PLATFORM'])]
env['CCFLAGS'] += ['-include', 'build/%s-%s/config.h' % (config['ARCH'], config['PLATFORM'])]

# Set up arrays used to track stuff built. Use LIBRARIES rather than LIBS
# as LIBS is a special SCons variable.
env['LIBRARIES'] = []
env['SHLIBS'] = []
env['BINS'] = []

# Set the directory that we want all libraries to be placed in.
env['LIBOUTDIR'] = Dir('libraries')

# Set up library emitters to modify the target path to get libraries placed
# in the correct location and to add the library to the libraries array.
def lib_emitter(target, source, env):
	target[0] = File('%s/%s' % (str(env['LIBOUTDIR']), str(target[0])))
	env['LIBRARIES'].append(target[0])
	return target, source
def shlib_emitter(target, source, env):
	lib_emitter(target, source, env)
	env['SHLIBS'].append(target[0])
	return target, source
env.Append(LIBEMITTER=[lib_emitter])
env.Append(SHLIBEMITTER=[shlib_emitter])

# Set up a program emitter to add binaries to the binaries array.
def program_emitter(target, source, env):
	env['BINS'].append(target[0])
	return target, source
env.Append(PROGEMITTER=[program_emitter])

# Add a builder to generate system call functions.
env['SYSINC'] = File('libraries/libkernel/arch/%s/syscalls.inc' % (config['ARCH']))
def sysgen_emitter(target, source, env):
	source.insert(0, env['SYSINC'])
	return target, source
env['BUILDERS']['Sysgen'] = Builder(action=Action('$SYSGEN $TARGET $SOURCES', '$GENCOMSTR'), emitter=sysgen_emitter)

# Build libraries before applications because they're required for applications
# to build.
SConscript(dirs=['libraries', 'binaries'], exports=['env'])

# Have all binaries depend on base libraries and C runtime files, and all
# shared libraries depend on the C runtime files.
for app in env['BINS']:
	if app.name != 'rtld-%s' % (config['ARCH']):
		Depends(app, File('libraries/libc.so'))
		Depends(app, File('libraries/libstdc++.so'))
for lib in env['SHLIBS']:
	if lib.name != 'libkernel.so':
		Depends(lib, File('libraries/libkernel.so'))
		if lib.name != 'libc.so':
			Depends(lib, File('libraries/libc.so'))
	Depends(lib, Glob('libraries/*crt*.o'))

# Set arrays needed in the distribution environment.
# FIXME: Eventually we shouldn't put everything in the boot image.
envmgr['dist']['BOOTBINS'] = env['BINS']
envmgr['dist']['BOOTLIBS'] = env['LIBRARIES']

# Set build defaults.
Default(Alias('libraries', env['LIBRARIES']))
Default(Alias('binaries', env['BINS']))
