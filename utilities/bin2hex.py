#!/usr/bin/env python
#
# Copyright (C) 2009-2011 Alex Smith
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

import sys

def usage():
	print 'Usage: %s [ARGS...] <binary> <variable name>' % (sys.argv[0])
	print 'Possible arguments:'
	print '  --no-size        - Do not create a size variable.'
	print '  --section <name> - Section to place array in.'

def main(args):
	size = True
	section = None

	# Parse arguments.
	while len(args) != 0 and args[0][0:2] == '--':
		arg = args.pop(0)
		if arg == '--help':
			usage()
			return 0
		elif arg == '--no-size':
			size = False
		elif arg == '--section':
			if len(args) == 0:
				print 'Argument %s requires a value' % (arg)
				usage()
				return 1
			section = args.pop(0)
		else:
			print 'Unknown argument %s' % (arg)
			usage()
			return 1
	if len(args) != 2:
		usage()
		return 1

	# Read in the file data.
	f = open(args[0], 'r')
	data = f.read()
	f.close()

	# Write it out.
	print '/* This file is automatically generated. Changes will be overwritten. */'
	if section:
		print 'unsigned char %s[] __attribute__((section("%s"))) = {' % (args[1], section)
	else:
		print 'unsigned char %s[] = {' % (args[1])
	for i in range(0, len(data)):
		if not i % 8:
			sys.stdout.write('\n')
		sys.stdout.write('0x%x,' % (ord(data[i])))
	print '};'
	if size:
		print 'unsigned int %s_size = %d;' % (args[1], len(data))

if __name__ == '__main__':
	sys.exit(main(sys.argv[1:]))
