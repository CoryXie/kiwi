/*
 * Copyright (C) 2010 Alex Smith
 *
 * Kiwi is open source software, released under the terms of the Non-Profit
 * Open Software License 3.0. You should have received a copy of the
 * licensing information along with the source code distribution. If you
 * have not received a copy of the license, please refer to the Kiwi
 * project website.
 *
 * Please note that if you modify this file, the license requires you to
 * ADD your name to the list of contributors. This boilerplate is not the
 * license itself; please refer to the copy of the license you have received
 * for complete terms.
 */

/**
 * @file
 * @brief		IA32 system call code generator.
 */

#include <boost/foreach.hpp>

#include "IA32Target.h"

using namespace std;

/** Add this target's types to the type map.
 * @param map		Map to add to. */
void IA32Target::AddTypes(TypeMap &map) {
	map["int"] = Type(1);
	map["char"] = Type(1);
	map["bool"] = Type(1);
	map["ptr_t"] = Type(1);
	map["size_t"] = Type(1);
	map["int8_t"] = Type(1);
	map["int16_t"] = Type(1);
	map["int32_t"] = Type(1);
	map["int64_t"] = Type(2);
	map["uint8_t"] = Type(1);
	map["uint16_t"] = Type(1);
	map["uint32_t"] = Type(1);
	map["uint64_t"] = Type(2);
}

/** Generate a push instruction. */
#define GENERATE_PUSH(name)	pushed.push_front((name)); stream << "	push	" name << endl;

/** Generate the system call code.
 * @param stream	Stream to write output to.
 * @param calls		List of system calls. */
void IA32Target::Generate(std::ostream &stream, const SyscallList &calls) {
	stream << "/* This file is automatically generated. Do not edit! */" << endl;
	BOOST_FOREACH(const Syscall *call, calls) {
		/* Write the common code for all calls. */
		stream << endl;
		stream << ".global " << call->GetName() << endl;
		stream << ".type " << call->GetName() << ", @function" << endl;
		stream << call->GetName() << ':' << endl;
		stream << "	movl	$" << call->GetID() << ", %eax" << endl;

		/* Now the difficult part - handling different numbers of
		 * arguments. We use callee-save registers for some things so
		 * must save them. Create a list of pushed registers so we can
		 * write out pops for them after without having to do a case
		 * for each number of arguments. The list is in the order to be
		 * popped in. If the call has more than 6 arguments, we do not
		 * do anything here: the kernel will copy all arguments from
		 * the stack. */
		list<string> pushed;
		switch(call->GetParameterCount()) {
		case 1:
			stream << "	movl	4(%esp), %edx" << endl;
			break;
		case 2:
			stream << "	movl	4(%esp), %edx" << endl;
			stream << "	movl	8(%esp), %ecx" << endl;
			break;
		case 3:
			GENERATE_PUSH("%edi");
			stream << "	movl	8(%esp), %edx" << endl;
			stream << "	movl	12(%esp), %ecx" << endl;
			stream << "	movl	16(%esp), %edi" << endl;
			break;
		case 4:
			GENERATE_PUSH("%edi");
			GENERATE_PUSH("%esi");
			stream << "	movl	12(%esp), %edx" << endl;
			stream << "	movl	16(%esp), %ecx" << endl;
			stream << "	movl	20(%esp), %edi" << endl;
			stream << "	movl	24(%esp), %esi" << endl;
			break;
		case 5:
			GENERATE_PUSH("%edi");
			GENERATE_PUSH("%esi");
			GENERATE_PUSH("%ebx");
			stream << "	movl	16(%esp), %edx" << endl;
			stream << "	movl	20(%esp), %ecx" << endl;
			stream << "	movl	24(%esp), %edi" << endl;
			stream << "	movl	28(%esp), %esi" << endl;
			stream << "	movl	32(%esp), %ebx" << endl;
			break;
		case 6:
			GENERATE_PUSH("%edi");
			GENERATE_PUSH("%esi");
			GENERATE_PUSH("%ebx");
			GENERATE_PUSH("%ebp");
			stream << "	movl	20(%esp), %edx" << endl;
			stream << "	movl	24(%esp), %ecx" << endl;
			stream << "	movl	28(%esp), %edi" << endl;
			stream << "	movl	32(%esp), %esi" << endl;
			stream << "	movl	36(%esp), %ebx" << endl;
			stream << "	movl	40(%esp), %ebp" << endl;
			break;
		}

		/* Perform the call, pop pushed registers and return. */
		stream << "	int	$0x80" << endl;
		BOOST_FOREACH(const std::string &str, pushed) {
			stream << "	pop	" << str << endl;
		}
		stream << "	ret" << endl;
		stream << ".size " << call->GetName() << ", .-" << call->GetName() << endl;
	}
}
