diff -urN gcc-4.5.0.orig/config.sub gcc-4.5.0/config.sub
--- gcc-4.5.0.orig/config.sub	2010-04-24 10:33:05.651702022 +0100
+++ gcc-4.5.0/config.sub	2010-04-24 10:33:43.610451956 +0100
@@ -1315,7 +1315,7 @@
 	      | -os2* | -vos* | -palmos* | -uclinux* | -nucleus* \
 	      | -morphos* | -superux* | -rtmk* | -rtmk-nova* | -windiss* \
 	      | -powermax* | -dnix* | -nx6 | -nx7 | -sei* | -dragonfly* \
-	      | -skyos* | -haiku* | -rdos* | -toppers* | -drops* | -es*)
+	      | -skyos* | -haiku* | -rdos* | -toppers* | -drops* | -es* | -kiwi*)
 	# Remember, each alternative MUST END IN *, to match a version number.
 		;;
 	-qnx*)
diff -urN gcc-4.5.0.orig/gcc/config/i386/kiwi32.h gcc-4.5.0/gcc/config/i386/kiwi32.h
--- gcc-4.5.0.orig/gcc/config/i386/kiwi32.h	1970-01-01 01:00:00.000000000 +0100
+++ gcc-4.5.0/gcc/config/i386/kiwi32.h	2010-04-24 10:33:15.454452061 +0100
@@ -0,0 +1,31 @@
+/* Definitions for Kiwi i386 targets
+   Copyright (C) 2007, Free Software Foundation, Inc.
+
+This file is part of GCC.
+
+GCC is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 3, or (at your option)
+any later version.
+
+GCC is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GCC; see the file COPYING3.  If not see
+<http://www.gnu.org/licenses/>.  */
+
+#undef  TARGET_VERSION
+#define TARGET_VERSION fprintf (stderr, " (i386 Kiwi/ELF)");
+
+#undef  LINK_SPEC
+#define LINK_SPEC "%{m64:-m elf_x86_64} %{!m64:-m elf_i386} \
+  %{shared:-shared} \
+  %{!shared: \
+    %{!static: \
+      %{rdynamic:-export-dynamic} \
+      %{m64:%{!dynamic-linker:-dynamic-linker /system/libraries/rtld-amd64}}} \
+      %{!m64:%{!dynamic-linker:-dynamic-linker /system/libraries/rtld-ia32}} \
+    %{static:-static}}"
diff -urN gcc-4.5.0.orig/gcc/config/i386/kiwi64.h gcc-4.5.0/gcc/config/i386/kiwi64.h
--- gcc-4.5.0.orig/gcc/config/i386/kiwi64.h	1970-01-01 01:00:00.000000000 +0100
+++ gcc-4.5.0/gcc/config/i386/kiwi64.h	2010-04-24 10:33:15.530590195 +0100
@@ -0,0 +1,31 @@
+/* Definitions for Kiwi x86-64 targets
+   Copyright (C) 2007, Free Software Foundation, Inc.
+
+This file is part of GCC.
+
+GCC is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 3, or (at your option)
+any later version.
+
+GCC is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GCC; see the file COPYING3.  If not see
+<http://www.gnu.org/licenses/>.  */
+
+#undef  TARGET_VERSION
+#define TARGET_VERSION fprintf (stderr, " (x86-64 Kiwi/ELF)");
+
+#undef  LINK_SPEC
+#define LINK_SPEC "%{!m32:-m elf_x86_64} %{m32:-m elf_i386} \
+  %{shared:-shared} \
+  %{!shared: \
+    %{!static: \
+      %{rdynamic:-export-dynamic} \
+      %{!m32:%{!dynamic-linker:-dynamic-linker /system/libraries/rtld-amd64}}} \
+      %{m32:%{!dynamic-linker:-dynamic-linker /system/libraries/rtld-ia32}} \
+    %{static:-static}}"
diff -urN gcc-4.5.0.orig/gcc/config/i386/t-kiwi64 gcc-4.5.0/gcc/config/i386/t-kiwi64
--- gcc-4.5.0.orig/gcc/config/i386/t-kiwi64	1970-01-01 01:00:00.000000000 +0100
+++ gcc-4.5.0/gcc/config/i386/t-kiwi64	2010-04-24 10:33:15.705515853 +0100
@@ -0,0 +1,17 @@
+MULTILIB_OPTIONS = m64/m32
+MULTILIB_DIRNAMES = 64 32
+MULTILIB_OSDIRNAMES = ../lib ../lib32
+
+LIBGCC = stmp-multilib
+INSTALL_LIBGCC = install-multilib
+   
+EXTRA_MULTILIB_PARTS=crtbegin.o crtend.o
+
+# The pushl in CTOR initialization interferes with frame pointer elimination.
+# crtend*.o cannot be compiled without -fno-asynchronous-unwind-tables,
+# because then __FRAME_END__ might not be the last thing in .eh_frame
+# section.
+CRTSTUFF_T_CFLAGS = -fno-omit-frame-pointer -fno-asynchronous-unwind-tables
+
+# Compile libgcc2.a with pic.
+TARGET_LIBGCC2_CFLAGS = -fPIC
diff -urN gcc-4.5.0.orig/gcc/config/kiwi.h gcc-4.5.0/gcc/config/kiwi.h
--- gcc-4.5.0.orig/gcc/config/kiwi.h	1970-01-01 01:00:00.000000000 +0100
+++ gcc-4.5.0/gcc/config/kiwi.h	2010-04-24 10:33:15.705515853 +0100
@@ -0,0 +1,37 @@
+/* Definitions for Kiwi targets
+   Copyright (C) 2007, Free Software Foundation, Inc.
+
+This file is part of GCC.
+
+GCC is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 3, or (at your option)
+any later version.
+
+GCC is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GCC; see the file COPYING3.  If not see
+<http://www.gnu.org/licenses/>.  */
+
+/* Specify predefined symbols in preprocessor.  */
+#undef  TARGET_OS_CPP_BUILTINS
+#define TARGET_OS_CPP_BUILTINS()		\
+	do {					\
+		builtin_define ("__Kiwi__");	\
+	} while (0)
+
+#undef  STARTFILE_SPEC
+#define STARTFILE_SPEC \
+  "%{!shared: %{pg|p|profile:gcrt1.o%s;pie:Scrt1.o%s;:crt1.o%s}} \
+   crti.o%s %{static:crtbeginT.o%s;shared|pie:crtbeginS.o%s;:crtbegin.o%s}"
+
+#undef  ENDFILE_SPEC
+#define ENDFILE_SPEC \
+  "%{shared|pie:crtendS.o%s;:crtend.o%s} crtn.o%s"
+
+#undef  LIB_SPEC
+#define LIB_SPEC "-lsystem"
diff -urN gcc-4.5.0.orig/gcc/config.gcc gcc-4.5.0/gcc/config.gcc
--- gcc-4.5.0.orig/gcc/config.gcc	2010-04-24 10:33:06.159577451 +0100
+++ gcc-4.5.0/gcc/config.gcc	2010-04-24 10:33:15.708577229 +0100
@@ -609,6 +609,14 @@
   default_use_cxa_atexit=yes
   use_gcc_stdint=wrap
   ;;
+*-*-kiwi*)
+   extra_parts="crtbegin.o crtend.o crtbeginS.o crtbeginT.o crtendS.o"
+   gas=yes
+   gnu_ld=yes
+   default_use_cxa_atexit=yes
+   tmake_file="t-svr4"
+   tm_file="${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h i386/i386elf.h kiwi.h"
+   ;;
 esac
 
 case ${target} in
@@ -1435,6 +1443,14 @@
 		tm_file="${tm_file} dbxcoff.h"
 	fi
 	;;
+i[34567]86-*-kiwi*)
+	tm_file="${tm_file} i386/kiwi32.h"
+	tmake_file="${tmake_file} i386/t-crtstuff"
+	;;
+x86_64-*-kiwi*)
+	tm_file="${tm_file} i386/x86-64.h i386/kiwi64.h"
+	tmake_file="${tmake_file} i386/t-kiwi64"
+	;;
 ia64*-*-elf*)
 	tm_file="${tm_file} dbxelf.h elfos.h newlib-stdint.h ia64/sysv4.h ia64/elf.h"
 	tmake_file="ia64/t-ia64"
diff -urN gcc-4.5.0.orig/libgcc/config.host gcc-4.5.0/libgcc/config.host
--- gcc-4.5.0.orig/libgcc/config.host	2010-04-24 10:33:05.651702022 +0100
+++ gcc-4.5.0/libgcc/config.host	2010-04-24 10:34:48.315452310 +0100
@@ -278,6 +278,10 @@
 	;;
 x86_64-*-elf*)
 	;;
+i[34567]86-*-kiwi*)
+	;;
+x86_64-*-kiwi*)
+	;;
 i[34567]86-*-freebsd*)
 	;;
 x86_64-*-freebsd*)
diff -urN gcc-4.5.0.orig/libstdc++-v3/config/io/basic_file_stdio.cc gcc-4.5.0/libstdc++-v3/config/io/basic_file_stdio.cc
--- gcc-4.5.0.orig/libstdc++-v3/config/io/basic_file_stdio.cc	2010-04-24 10:33:05.781451522 +0100
+++ gcc-4.5.0/libstdc++-v3/config/io/basic_file_stdio.cc	2010-04-24 10:45:17.748826189 +0100
@@ -28,42 +28,6 @@
 //
 
 #include <bits/basic_file.h>
-#include <fcntl.h>
-#include <errno.h>
-
-#ifdef _GLIBCXX_HAVE_POLL
-#include <poll.h>
-#endif
-
-// Pick up ioctl on Solaris 2.8
-#ifdef _GLIBCXX_HAVE_UNISTD_H
-#include <unistd.h>
-#endif
-
-// Pick up FIONREAD on Solaris 2
-#ifdef _GLIBCXX_HAVE_SYS_IOCTL_H
-#define BSD_COMP 
-#include <sys/ioctl.h>
-#endif
-
-// Pick up FIONREAD on Solaris 2.5.
-#ifdef _GLIBCXX_HAVE_SYS_FILIO_H
-#include <sys/filio.h>
-#endif
-
-#ifdef _GLIBCXX_HAVE_SYS_UIO_H
-#include <sys/uio.h>
-#endif
-
-#if defined(_GLIBCXX_HAVE_S_ISREG) || defined(_GLIBCXX_HAVE_S_IFREG)
-# include <sys/stat.h>
-# ifdef _GLIBCXX_HAVE_S_ISREG
-#  define _GLIBCXX_ISREG(x) S_ISREG(x)
-# else
-#  define _GLIBCXX_ISREG(x) (((x) & S_IFMT) == S_IFREG)
-# endif
-#endif
-
 #include <limits> // For <off_t>::max() and min() and <streamsize>::max()
 
 namespace 
@@ -109,73 +73,6 @@
       default: return 0; // invalid
       }
   }
-
-  // Wrapper handling partial write.
-  static std::streamsize
-  xwrite(int __fd, const char* __s, std::streamsize __n)
-  {
-    std::streamsize __nleft = __n;
-
-    for (;;)
-      {
-	const std::streamsize __ret = write(__fd, __s, __nleft);
-	if (__ret == -1L && errno == EINTR)
-	  continue;
-	if (__ret == -1L)
-	  break;
-
-	__nleft -= __ret;
-	if (__nleft == 0)
-	  break;
-
-	__s += __ret;
-      }
-
-    return __n - __nleft;
-  }
-
-#ifdef _GLIBCXX_HAVE_WRITEV
-  // Wrapper handling partial writev.
-  static std::streamsize
-  xwritev(int __fd, const char* __s1, std::streamsize __n1,
-	  const char* __s2, std::streamsize __n2)
-  {
-    std::streamsize __nleft = __n1 + __n2;
-    std::streamsize __n1_left = __n1;
-
-    struct iovec __iov[2];
-    __iov[1].iov_base = const_cast<char*>(__s2);
-    __iov[1].iov_len = __n2;
-
-    for (;;)
-      {
-	__iov[0].iov_base = const_cast<char*>(__s1);
-	__iov[0].iov_len = __n1_left;
-
-	const std::streamsize __ret = writev(__fd, __iov, 2);
-	if (__ret == -1L && errno == EINTR)
-	  continue;
-	if (__ret == -1L)
-	  break;
-
-	__nleft -= __ret;
-	if (__nleft == 0)
-	  break;
-
-	const std::streamsize __off = __ret - __n1_left;
-	if (__off >= 0)
-	  {
-	    __nleft -= xwrite(__fd, __s2 + __off, __n2 - __off);
-	    break;
-	  }
-	
-	__s1 += __ret;
-	__n1_left -= __ret;
-      }
-
-    return __n1 + __n2 - __nleft;
-  }
-#endif
 } // anonymous namespace
 
 
@@ -195,10 +92,8 @@
     if (!this->is_open() && __file)
       {
 	int __err;
-	errno = 0;	
-	do
-	  __err = this->sync();
-	while (__err && errno == EINTR);
+
+	__err = this->sync();
 	if (!__err)
 	  {
 	    _M_cfile = __file;
@@ -210,19 +105,9 @@
   }
   
   __basic_file<char>*
-  __basic_file<char>::sys_open(int __fd, ios_base::openmode __mode) throw ()
+  __basic_file<char>::sys_open(int /*__fd*/, ios_base::openmode /*__mode*/) throw ()
   {
-    __basic_file* __ret = NULL;
-    const char* __c_mode = fopen_mode(__mode);
-    if (__c_mode && !this->is_open() && (_M_cfile = fdopen(__fd, __c_mode)))
-      {
-	char* __buf = NULL;
-	_M_cfile_created = true;
-	if (__fd == 0)
-	  setvbuf(_M_cfile, __buf, _IONBF, 0);
-	__ret = this;
-      }
-    return __ret;
+    return NULL;
   }
   
   __basic_file<char>* 
@@ -252,7 +137,7 @@
   
   int 
   __basic_file<char>::fd() throw ()
-  { return fileno(_M_cfile); }
+  { return -1; }
   
   __c_file*
   __basic_file<char>::file() throw ()
@@ -271,10 +156,7 @@
 	    // for error first. However, C89/C99 (at variance with IEEE
 	    // 1003.1, f.i.) do not mandate that fclose must set errno
 	    // upon error.
-	    errno = 0;
-	    do
-	      __err = fclose(_M_cfile);
-	    while (__err && errno == EINTR);
+	    __err = fclose(_M_cfile);
 	  }
 	_M_cfile = 0;
 	if (!__err)
@@ -286,45 +168,51 @@
   streamsize 
   __basic_file<char>::xsgetn(char* __s, streamsize __n)
   {
-    streamsize __ret;
-    do
-      __ret = read(this->fd(), __s, __n);
-    while (__ret == -1L && errno == EINTR);
-    return __ret;
+    streamsize __i;
+    int __ret;
+
+    for(__i = 0; __i < __n; __i++) {
+      if((__ret = fgetc(_M_cfile)) == EOF) {
+        break;
+      }
+      __s[__i] = (char)__ret;
+    }
+    return (__i == 0 && __n > 0 && ferror(_M_cfile)) ? (streamsize)-1L : __i;
   }
 
   streamsize 
   __basic_file<char>::xsputn(const char* __s, streamsize __n)
-  { return xwrite(this->fd(), __s, __n); }
+  {
+    streamsize __i;
+
+    for(__i = 0; __i < __n; __i++) {
+      if(fputc((int)__s[__i], _M_cfile) == EOF) {
+        break;
+      }
+    }
+    return __i;
+  }
 
   streamsize 
   __basic_file<char>::xsputn_2(const char* __s1, streamsize __n1,
 			       const char* __s2, streamsize __n2)
   {
     streamsize __ret = 0;
-#ifdef _GLIBCXX_HAVE_WRITEV
-    __ret = xwritev(this->fd(), __s1, __n1, __s2, __n2);
-#else
     if (__n1)
-      __ret = xwrite(this->fd(), __s1, __n1);
+      __ret = xsputn(__s1, __n1);
 
     if (__ret == __n1)
-      __ret += xwrite(this->fd(), __s2, __n2);
-#endif
+      __ret += xsputn(__s2, __n2);
     return __ret;
   }
 
   streamoff
   __basic_file<char>::seekoff(streamoff __off, ios_base::seekdir __way) throw ()
   {
-#ifdef _GLIBCXX_USE_LFS
-    return lseek64(this->fd(), __off, __way);
-#else
-    if (__off > numeric_limits<off_t>::max()
-	|| __off < numeric_limits<off_t>::min())
+    if (__off > numeric_limits<long>::max()
+	|| __off < numeric_limits<long>::min())
       return -1L;
-    return lseek(this->fd(), __off, __way);
-#endif
+    return fseek(_M_cfile, __off, __way);
   }
 
   int 
@@ -334,45 +222,10 @@
   streamsize
   __basic_file<char>::showmanyc()
   {
-#ifdef FIONREAD
-    // Pipes and sockets.    
-#ifdef _GLIBCXX_FIONREAD_TAKES_OFF_T
-    off_t __num = 0;
-#else
-    int __num = 0;
-#endif
-    int __r = ioctl(this->fd(), FIONREAD, &__num);
-    if (!__r && __num >= 0)
-      return __num; 
-#endif    
-
-#ifdef _GLIBCXX_HAVE_POLL
-    // Cheap test.
-    struct pollfd __pfd[1];
-    __pfd[0].fd = this->fd();
-    __pfd[0].events = POLLIN;
-    if (poll(__pfd, 1, 0) <= 0)
-      return 0;
-#endif   
-
-#if defined(_GLIBCXX_HAVE_S_ISREG) || defined(_GLIBCXX_HAVE_S_IFREG)
-    // Regular files.
-#ifdef _GLIBCXX_USE_LFS
-    struct stat64 __buffer;
-    const int __err = fstat64(this->fd(), &__buffer);
-    if (!__err && _GLIBCXX_ISREG(__buffer.st_mode))
-      {
-	const streamoff __off = __buffer.st_size - lseek64(this->fd(), 0,
-							   ios_base::cur);
-	return std::min(__off, streamoff(numeric_limits<streamsize>::max()));
-      }
-#else
-    struct stat __buffer;
-    const int __err = fstat(this->fd(), &__buffer);
-    if (!__err && _GLIBCXX_ISREG(__buffer.st_mode))
-      return __buffer.st_size - lseek(this->fd(), 0, ios_base::cur);
-#endif
-#endif
+    //struct stat __buffer;
+    //const int __err = fstat(this->fd(), &__buffer);
+    //if (!__err && _GLIBCXX_ISREG(__buffer.st_mode))
+    //  return __buffer.st_size - lseek(this->fd(), 0, ios_base::cur);
     return 0;
   }
 
diff -urN gcc-4.5.0.orig/libstdc++-v3/config/os/kiwi/error_constants.h gcc-4.5.0/libstdc++-v3/config/os/kiwi/error_constants.h
--- gcc-4.5.0.orig/libstdc++-v3/config/os/kiwi/error_constants.h	1970-01-01 01:00:00.000000000 +0100
+++ gcc-4.5.0/libstdc++-v3/config/os/kiwi/error_constants.h	2010-04-24 10:33:15.730914137 +0100
@@ -0,0 +1,44 @@
+// Specific definitions for Kiwi platforms  -*- C++ -*-
+
+// Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.
+//
+// This file is part of the GNU ISO C++ Library.  This library is free
+// software; you can redistribute it and/or modify it under the
+// terms of the GNU General Public License as published by the
+// Free Software Foundation; either version 3, or (at your option)
+// any later version.
+
+// This library is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// Under Section 7 of GPL version 3, you are granted additional
+// permissions described in the GCC Runtime Library Exception, version
+// 3.1, as published by the Free Software Foundation.
+
+// You should have received a copy of the GNU General Public License and
+// a copy of the GCC Runtime Library Exception along with this program;
+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
+// <http://www.gnu.org/licenses/>.
+
+/** @file error_constants.h
+ *  This is an internal header file, included by other library headers.
+ *  You should not attempt to use it directly.
+ */
+
+#ifndef _GLIBCXX_ERROR_CONSTANTS
+#define _GLIBCXX_ERROR_CONSTANTS 1
+
+#include <bits/c++config.h>
+
+_GLIBCXX_BEGIN_NAMESPACE(std)
+
+  enum class errc
+    {
+      an_error = 			0
+    };
+
+_GLIBCXX_END_NAMESPACE
+
+#endif
diff -urN gcc-4.5.0.orig/libstdc++-v3/configure.host gcc-4.5.0/libstdc++-v3/configure.host
--- gcc-4.5.0.orig/libstdc++-v3/configure.host	2010-04-24 10:33:05.686452698 +0100
+++ gcc-4.5.0/libstdc++-v3/configure.host	2010-04-24 10:33:15.731577061 +0100
@@ -256,6 +256,10 @@
     atomicity_dir=os/irix
     atomic_word_dir=os/irix
     ;;
+  kiwi*)
+    error_constants_dir="os/kiwi"
+    os_include_dir="os/generic"
+    ;;
   mingw32*)
     os_include_dir="os/mingw32"
     error_constants_dir="os/mingw32"
diff -urN gcc-4.5.0.orig/libstdc++-v3/crossconfig.m4 gcc-4.5.0/libstdc++-v3/crossconfig.m4
--- gcc-4.5.0.orig/libstdc++-v3/crossconfig.m4	2010-04-24 10:33:05.687452369 +0100
+++ gcc-4.5.0/libstdc++-v3/crossconfig.m4	2010-04-24 10:33:15.731577061 +0100
@@ -141,6 +141,10 @@
 	;;
     esac
     ;;
+  *-kiwi*)
+    GLIBCXX_CHECK_COMPILER_FEATURES
+    GLIBCXX_CHECK_STDLIB_SUPPORT
+    ;;
   *-linux* | *-uclinux* | *-gnu* | *-kfreebsd*-gnu | *-knetbsd*-gnu)
     GLIBCXX_CHECK_COMPILER_FEATURES
     GLIBCXX_CHECK_LINKER_FEATURES
diff -urN gcc-4.5.0.orig/libstdc++-v3/include/ext/stdio_sync_filebuf.h gcc-4.5.0/libstdc++-v3/include/ext/stdio_sync_filebuf.h
--- gcc-4.5.0.orig/libstdc++-v3/include/ext/stdio_sync_filebuf.h	2010-04-24 10:33:05.724451780 +0100
+++ gcc-4.5.0/libstdc++-v3/include/ext/stdio_sync_filebuf.h	2010-04-24 10:33:15.732519543 +0100
@@ -33,7 +33,7 @@
 #pragma GCC system_header
 
 #include <streambuf>
-#include <unistd.h>
+//#include <unistd.h>
 #include <cstdio>
 #include <bits/c++io.h>  // For __c_file
 
diff -urN gcc-4.5.0.orig/libtool.m4 gcc-4.5.0/libtool.m4
--- gcc-4.5.0.orig/libtool.m4	2010-04-24 10:33:06.347702588 +0100
+++ gcc-4.5.0/libtool.m4	2010-04-24 10:33:15.735577180 +0100
@@ -5370,7 +5370,9 @@
   _LT_LINKER_SHLIBS($1)
   _LT_SYS_DYNAMIC_LINKER($1)
   _LT_LINKER_HARDCODE_LIBPATH($1)
-  LT_SYS_DLOPEN_SELF
+  if test "$cross_compiling" = no; then
+    LT_SYS_DLOPEN_SELF
+  fi
   _LT_CMD_STRIPLIB
 
   # Report which library types will actually be built
diff -urN gcc-4.5.0.orig/ltmain.sh gcc-4.5.0/ltmain.sh
--- gcc-4.5.0.orig/ltmain.sh	2010-04-24 10:33:06.362702431 +0100
+++ gcc-4.5.0/ltmain.sh	2010-04-24 10:33:15.740579452 +0100
@@ -1451,6 +1451,12 @@
       removelist="$lobj $libobj ${libobj}T"
     fi
 
+    case $host_os in
+    kiwi*)
+      pic_mode=yes
+      ;;
+    esac
+
     # On Cygwin there's no "real" PIC flag so we must build both object types
     case $host_os in
     cygwin* | mingw* | pw32* | os2* | cegcc*)
diff -urN gcc-4.5.0.orig/Makefile.in gcc-4.5.0/Makefile.in
--- gcc-4.5.0.orig/Makefile.in	2010-04-24 10:33:06.346702177 +0100
+++ gcc-4.5.0/Makefile.in	2010-04-24 10:33:15.386576540 +0100
@@ -58408,7 +58408,6 @@
 configure-target-libobjc: maybe-configure-target-boehm-gc
 all-target-libobjc: maybe-all-target-libiberty
 all-target-libobjc: maybe-all-target-boehm-gc
-all-target-libstdc++-v3: maybe-all-target-libiberty
 configure-target-libstdc++-v3: maybe-configure-target-libgomp
 
 configure-stage1-target-libstdc++-v3: maybe-configure-stage1-target-libgomp
